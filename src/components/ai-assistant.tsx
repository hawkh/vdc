"use client";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Brain, Sparkles, FileText, AlertTriangle, Clock } from "lucide-react";
import { useState } from "react";

export function AIAssistant() {
  const [symptoms, setSymptoms] = useState("");
  const [analysis, setAnalysis] = useState<any>(null);
  const [suggestions, setSuggestions] = useState<any[]>([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  const analyzeSymptoms = async () => {
    if (!symptoms.trim()) return;
    
    setIsAnalyzing(true);
    
    // Simulate AI analysis
    setTimeout(() => {
      setAnalysis({
        riskFactors: ["Dental plaque buildup", "Gum inflammation"],
        recommendations: ["Professional cleaning", "Improved oral hygiene", "Regular checkups"],
        treatmentPriority: "medium",
        followUpNeeded: true
      });
      
      setSuggestions([
        {
          treatment: "Professional Dental Cleaning",
          urgency: "medium",
          estimatedCost: "₹2,500",
          duration: "45 minutes",
          description: "Deep cleaning to remove plaque and tartar buildup"
        },
        {
          treatment: "Gum Treatment",
          urgency: "high",
          estimatedCost: "₹5,000",
          duration: "1 hour",
          description: "Specialized treatment for gum inflammation"
        }
      ]);
      
      setIsAnalyzing(false);
    }, 2000);
  };

  const generateReport = () => {
    // Simulate report generation
    const report = `
DENTAL AI ANALYSIS REPORT
========================

Patient Symptoms: ${symptoms}

Risk Assessment:
${analysis?.riskFactors?.map((factor: string) => `• ${factor}`).join('\n') || ''}

Recommendations:
${analysis?.recommendations?.map((rec: string) => `• ${rec}`).join('\n') || ''}

Treatment Priority: ${analysis?.treatmentPriority?.toUpperCase()}
Follow-up Required: ${analysis?.followUpNeeded ? 'Yes' : 'No'}

Suggested Treatments:
${suggestions.map(s => `• ${s.treatment} - ${s.estimatedCost} (${s.duration})`).join('\n')}

Generated by Claude AI Assistant
Date: ${new Date().toLocaleDateString()}
    `;

    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `AI_Analysis_${new Date().toISOString().split('T')[0]}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Brain className="h-5 w-5 text-purple-600" />
          AI Dental Assistant
          <Badge variant="secondary" className="ml-2">
            <Sparkles className="h-3 w-3 mr-1" />
            Claude AI
          </Badge>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <label className="text-sm font-medium">Describe Patient Symptoms</label>
          <Textarea
            placeholder="e.g., Patient complains of tooth pain, bleeding gums, sensitivity to cold..."
            value={symptoms}
            onChange={(e) => setSymptoms(e.target.value)}
            className="mt-1"
          />
        </div>
        
        <Button 
          onClick={analyzeSymptoms} 
          disabled={!symptoms.trim() || isAnalyzing}
          className="w-full"
        >
          {isAnalyzing ? (
            <>
              <Brain className="h-4 w-4 mr-2 animate-pulse" />
              Analyzing with AI...
            </>
          ) : (
            <>
              <Sparkles className="h-4 w-4 mr-2" />
              Analyze Symptoms
            </>
          )}
        </Button>

        {analysis && (
          <div className="space-y-4 mt-6">
            <div className="border rounded-lg p-4">
              <h3 className="font-semibold flex items-center gap-2 mb-3">
                <AlertTriangle className="h-4 w-4 text-orange-500" />
                Risk Assessment
              </h3>
              <div className="space-y-2">
                {analysis.riskFactors?.map((factor: string, index: number) => (
                  <div key={index} className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-orange-500 rounded-full" />
                    <span className="text-sm">{factor}</span>
                  </div>
                ))}
              </div>
              <div className="mt-3">
                <Badge variant={analysis.treatmentPriority === 'high' ? 'destructive' : 
                              analysis.treatmentPriority === 'medium' ? 'secondary' : 'outline'}>
                  {analysis.treatmentPriority?.toUpperCase()} Priority
                </Badge>
              </div>
            </div>

            <div className="border rounded-lg p-4">
              <h3 className="font-semibold mb-3">AI Recommendations</h3>
              <div className="space-y-2">
                {analysis.recommendations?.map((rec: string, index: number) => (
                  <div key={index} className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full" />
                    <span className="text-sm">{rec}</span>
                  </div>
                ))}
              </div>
            </div>

            {suggestions.length > 0 && (
              <div className="border rounded-lg p-4">
                <h3 className="font-semibold mb-3">Suggested Treatments</h3>
                <div className="space-y-3">
                  {suggestions.map((suggestion, index) => (
                    <div key={index} className="border rounded p-3">
                      <div className="flex justify-between items-start mb-2">
                        <h4 className="font-medium">{suggestion.treatment}</h4>
                        <div className="flex items-center gap-2">
                          <Badge variant={suggestion.urgency === 'high' ? 'destructive' : 'secondary'}>
                            {suggestion.urgency}
                          </Badge>
                          <Badge variant="outline">{suggestion.estimatedCost}</Badge>
                        </div>
                      </div>
                      <p className="text-sm text-muted-foreground mb-2">{suggestion.description}</p>
                      <div className="flex items-center gap-2 text-xs text-muted-foreground">
                        <Clock className="h-3 w-3" />
                        Duration: {suggestion.duration}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            <div className="flex gap-2">
              <Button onClick={generateReport} variant="outline" className="flex-1">
                <FileText className="h-4 w-4 mr-2" />
                Download Report
              </Button>
              <Dialog>
                <DialogTrigger asChild>
                  <Button variant="outline">View Full Analysis</Button>
                </DialogTrigger>
                <DialogContent className="max-w-2xl">
                  <DialogHeader>
                    <DialogTitle>Complete AI Analysis</DialogTitle>
                  </DialogHeader>
                  <div className="space-y-4 max-h-96 overflow-y-auto">
                    <pre className="text-sm bg-muted p-4 rounded whitespace-pre-wrap">
                      {JSON.stringify({ analysis, suggestions }, null, 2)}
                    </pre>
                  </div>
                </DialogContent>
              </Dialog>
            </div>
          </div>
        )}

        {!process.env.NEXT_PUBLIC_CLAUDE_ENABLED && (
          <div className="text-xs text-muted-foreground text-center p-2 bg-muted rounded">
            Demo mode - Add CLAUDE_API_KEY to enable real AI analysis
          </div>
        )}
      </CardContent>
    </Card>
  );
}